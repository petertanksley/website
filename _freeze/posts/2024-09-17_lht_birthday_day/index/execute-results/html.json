{
  "hash": "aaf4d87fff0fe69c85d09fde62cc792d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Left-hand Thoughts #1\"\ndescription: \"Birthday days\"\nauthor:\n  - name: Peter T. Tanksley\n    url: https://petertanksley.github.io/\n    affiliation: ALERRT Center, Texas State University\ndate: 09/17/24\ncategories: [LHT, R, dataviz] # self-defined categories\ncitation: \n  url: https://petertanksley.github.io/posts/2024-09-17_lht_birthday_day/ \nimage: spiral1.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n# Birthday Days\n\nI have a largish family. At last count, I believe I had something in the order of fifteen nieces and nephews (to give you an indication). When my girls and I drive to the family farm (yes, we have a family farm and, yes, you should be jealous because, yes, it is dope), various siblings of mine descend on the farm with their many children in-tow.\n\nOn one such occasion, a nephew of mine said a curious thing. We were discussing birthdays and he said some like \"My birthday is always on Saturday or Sunday\". Now, being only eight or so at the time, I suppose it is forgivable that he thought this–perhaps his last couple of birthdays were on these days and the rest were simply too far distant to remember. But it got me wondering: how do birthday days fall year-to-year?\n\nA simple enough question, but as I thought about it I realized that I didn't know anything about the subject. I had never thought about it! Now, obviously I could have simply Google'd my way into some higher state of enlightenment. But where's the fun in that? I sensed that I had the tools in R toolkit to answer this question with logic alone (and who doesn't like going the extra mile when it means you get to play with a new puzzle?).\n\nSo, as the Joker once said: \"Here. We. Go.\"\n\n# To the Batcave!\n\n(or RStudio, whatever...)\n\n## Step one: set-up and generate some data\n\nI'll start by loading up my favorite R packages. I pretty much always load these four packages, with the occasional addition of the {janitor} package if I'm doing some serious data cleaning.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(rio, \n       tidyverse,\n       tidylog)\n```\n:::\n\n\nNext up, generate some data! Let's see... I need to find out what day of the week a specific calendar date falls on across multiple years. So let's pick a fictitious birthday to start (can't be sharin' my real deets on the interwebs). Let's go with January 30th, 2000. Ok, how we're ready to generate some data on all of the years moving forward!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data <- tibble(year = seq(2000, 2024),\n                    month = 1, \n                    day = 30)\nglimpse(bday_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 25\nColumns: 3\n$ year  <int> 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010…\n$ month <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day   <dbl> 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, …\n```\n\n\n:::\n:::\n\n\nSweet! We've got our basic data with repeated day/month values across years. Now, in order to move the investigation forward, we'll want to create some date columns using the {lubidate} package. This will help later on I'm sure...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data <- bday_data |> \n  mutate(bday = ymd(paste(year, month, day, sep = \" \")),\n         wday = wday(bday, label=TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nmutate: new variable 'bday' (Date) with 25 unique values and 0% NA\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n        new variable 'wday' (ordered factor) with 7 unique values and 0% NA\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(bday_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 25\nColumns: 5\n$ year  <int> 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010…\n$ month <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day   <dbl> 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, …\n$ bday  <date> 2000-01-30, 2001-01-30, 2002-01-30, 2003-01-30, 2004-01-30, 200…\n$ wday  <ord> Sun, Tue, Wed, Thu, Fri, Sun, Mon, Tue, Wed, Fri, Sat, Sun, Mon,…\n```\n\n\n:::\n:::\n\n\nI added two variables. The first is a for real for real date variable (\"bday\"). Basically, this variable has special metadata attached to it that allows for lots of convenient calculations; it's not just a string. The second variable, \"wday\", was the day of the week for the date variable \"bday\". I chose to include labels too, and it gave me back a nicely ordered factor-esque variable (so convenient! Thank you, {lubridate}!).\n\n## Step two: visualize the data\n\nHaving created a dataset with lots of information regarding the days of interest, let's take a look said shiny new dataset!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data |> \n  ggplot(aes(year, wday)) +\n  geom_tile()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nCool! Ok, so there are definitely some patterns here. It looks like there are four-year stretches of consecutive days of the week for the birthday day. So, if my birthday was on a Wednesday last year, it would be Thursday this year, Friday the following year, and Saturday the year after that (assuming last year was the start of the four-year stretch)!\n\nBut the pattern is only four years long, after which it skips a day of the week, and then starts a new four year stretch. Interesting. I'm pretty sure I know what's going on, but before we sleuth any further, let's clean up this plot some.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data |> \n  ggplot(aes(year, wday)) +\n  geom_tile(fill=\"dodgerblue\") +\n  labs(x=element_blank(),\n       y=element_blank()) +\n  theme_classic() +\n  coord_fixed(expand = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis is nicer, but I want to avoid having tiles floating in air. Let beef up our dataset a little bit to include more than just the specific birthday we chose.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data <- bday_data |> \n  complete(year, wday)\nglimpse(bday_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 175\nColumns: 5\n$ year  <int> 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2001, 2001, 2001, 2001…\n$ wday  <ord> Sun, Mon, Tue, Wed, Thu, Fri, Sat, Sun, Mon, Tue, Wed, Thu, Fri,…\n$ month <dbl> 1, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA…\n$ day   <dbl> 30, NA, NA, NA, NA, NA, NA, NA, NA, 30, NA, NA, NA, NA, NA, NA, …\n$ bday  <date> 2000-01-30, NA, NA, NA, NA, NA, NA, NA, NA, 2001-01-30, NA, NA,…\n```\n\n\n:::\n:::\n\n\nOk, we filled out each year/weekday combination (the two axes of our plot). Now let's try the plot again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data |> \n  ggplot(aes(year, wday)) +\n  geom_tile(fill=\"dodgerblue\") +\n  labs(x=element_blank(),\n       y=element_blank()) +\n  theme_classic() +\n  coord_fixed(expand = F)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nDamn. We need to isolate our specific birthday days again. Hang on...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data |> \n  ggplot(aes(year, wday)) +\n  geom_tile(aes(fill=ifelse(!is.na(day), \"dodgerblue\", \"grey\")), \n            show.legend = F,\n            color=\"grey20\") +\n  labs(x=element_blank(),\n       y=element_blank()) +\n  theme_classic() +\n  coord_fixed(expand = F) +\n  scale_fill_identity() +\n  scale_x_continuous(breaks = seq(2000, 2024)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nOk! Now we're cooking with gas! Couple things I did there. First, I used a conditional argument in the aes() call (I can't tell you how handy that trick is). Sometimes it's better to have the result of the conditional hard-coded into your dataset if its information value is high. But we're exploring here, so no biggie. Second, I adjusted the x-axis labels. I generally don't like have labels that need to be angled in order to be legible, but this is not too egregious.\n\n## Step three: figure out the pattern!\n\nWe're so close to figuring out birthday days, I can taste the German chocolate cake (it's a huge thing in my family, just roll with it)! But did you guess what breaks up the four-year pattern of consecutive weekdays? Of course you did, you clever so-and-so, it's **leap years**! Years are not actually 365 days long; rather, they are 356.25 days long. And every four years, that .25 days adds up to a whole dollar! Or day! So, let's bring that information into our dataset and plot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data <- bday_data |> \n  mutate(lyear = leap_year(year))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nmutate: new variable 'lyear' (logical) with 2 unique values and 0% NA\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(bday_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 175\nColumns: 6\n$ year  <int> 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2001, 2001, 2001, 2001…\n$ wday  <ord> Sun, Mon, Tue, Wed, Thu, Fri, Sat, Sun, Mon, Tue, Wed, Thu, Fri,…\n$ month <dbl> 1, NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, NA…\n$ day   <dbl> 30, NA, NA, NA, NA, NA, NA, NA, NA, 30, NA, NA, NA, NA, NA, NA, …\n$ bday  <date> 2000-01-30, NA, NA, NA, NA, NA, NA, NA, NA, 2001-01-30, NA, NA,…\n$ lyear <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, F…\n```\n\n\n:::\n:::\n\n\nThanks again to the {lubridate} package (should really have made them today's sponsor...), we have a lovely logical variable \"lyear\" that let's us know if a specific year was a leap year. Now to update the plot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbday_data |> \n  ggplot(aes(year, wday)) +\n  geom_tile(aes(fill=case_when((!is.na(day)) ~ \"dodgerblue\",\n                               (is.na(day) & lyear==TRUE) ~ \"brown4\",\n                               (is.na(day) & lyear==FALSE) ~ \"grey\",)), \n            show.legend = F,\n            color=\"grey20\") +\n  labs(x=element_blank(),\n       y=element_blank()) +\n  theme_classic() +\n  coord_fixed(expand = F) +\n  scale_fill_identity() +\n  scale_x_continuous(breaks = seq(2000, 2024)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nLook at that plot! It says it all! Four-year consecutive birthday days, skips one day because of those dastardly leap years, and then continues on for four more blissful years of predictable birthday days. What more could you want in a plot?\n\n(oh god, is he going to go the extra mile. he knows no one cares, right? there are no grades here, just longer blog posts that no one will ever read. oh shit, here he goes!)\n\n## Step four (the extra mile): let's turn all of this into a function!\n\nI'm going to fast forward a little bit through this part and keep the commentary to a minimum.\n\nFirst, I'll wrap the data creation bit into a function with the data\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}